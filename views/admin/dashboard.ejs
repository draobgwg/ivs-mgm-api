
<!DOCTYPE html>
<html>
<head>
  <title>Admin - Users</title>
  <link rel="stylesheet" href="/assets/css/commonStyles.css">
</head>
<body class="bg-blue">
  <%- include('components/sidebar') %>
  <%- include('components/header') %>
 
  <div class="main-content">
    <div class="page-title-div">
      <h2>Dashboard</h2>
      <div id="toggle-container">
        <button id="toggle-button">Switch to Line Chart</button>
      </div>
    </div>
    <div class="chart-area">
      <div class="chart-container" style="height: 70vh; padding: 30px 0;">
        <canvas id="myChart"></canvas>
      </div>
    </div>
  </div>
 
  <%- include('components/footer') %>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    const registrants = JSON.parse("<%= results %>".replace(/&#34;/g, '"'));
    console.log(registrants,"registrants")



// Group registrants by hour of signup, converting to 12-hour format
let registrantsByHour = registrants.reduce((acc, registrant) => {
  const date = new Date(registrant.created_ts);
  const hour = date.getHours() % 12 || 12; // Convert to 12-hour format
  const period = date.getHours() >= 12 ? 'PM' : 'AM';
  const label = `${hour} ${period}`;

  acc[label] = (acc[label] || 0) + 1;
  return acc;
}, {});

// Create data for the chart
const chartData = {
  labels: Object.keys(registrantsByHour),
  datasets: [{
    label: 'Registrants by Hour',
    data: Object.values(registrantsByHour),
    backgroundColor: 'rgba(255, 99, 132, 0.2)',
    borderColor: 'rgba(255, 99, 132, 1)',
    borderWidth: 1
  }]
};

// Create the chart
const ctx = document.getElementById('myChart').getContext('2d');
const myChart = new Chart(ctx, {
  type: 'doughnut', // Change to 'doughnut' for a circle graph
  data: chartData,
  options: {
    // Add chart options as needed
  }
});

// Function to update the chart data and rerender
function updateChart(newRegistrants) {
  registrants = newRegistrants;
  registrantsByHour = registrants.reduce((acc, registrant) => {
    const date = new Date(registrant.created_ts);
    const hour = date.getHours() % 12 || 12; // Convert to 12-hour format
    const period = date.getHours() >= 12 ? 'PM' : 'AM';
    const label = `${hour} ${period}`;

    acc[label] = (acc[label] || 0) + 1;
    return acc;
  }, {});

  chartData.labels = Object.keys(registrantsByHour);
  chartData.datasets[0].data = Object.values(registrantsByHour);

  myChart.update();
}

// Example usage:
const newRegistrants = [
  // ... new registrant data
];
// updateChart(newRegistrants);


// Function to update the chart type
function toggleChartType() {
  const newType = myChart.config.type === 'line' ? 'doughnut' : 'line';
  const toggleButton = document.getElementById("toggle-button"); 
  toggleButton.textContent= "Switch to "+myChart.config.type.toUpperCase()+" Chart"
  myChart.config.type = newType;
  myChart.update();
  
}

const toggleButton = document.getElementById("toggle-button");
toggleButton.addEventListener('click', toggleChartType);

// Add a toggle button
// const pageLinksContainer = document.getElementById("toggle-container");
// const toggleButton = document.createElement('button');
// const newType = myChart.config.type === 'line' ? 'doughnut' : 'line';
// toggleButton.textContent = 'Toggle Chart Type as: '+newType;
// toggleButton.addEventListener('click', toggleChartType);
// pageLinksContainer.appendChild(toggleButton);


  </script>
</body>

</html>